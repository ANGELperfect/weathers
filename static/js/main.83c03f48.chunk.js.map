{"version":3,"sources":["components/Weather.js","components/Locate.js","App.js","serviceWorker.js","index.js"],"names":["Weather","p","react_default","a","createElement","className","temp","city","country","hum","desc","Locate","onSubmit","weather","type","name","placeholder","value","apiKey","App","state","getWeather","_callee","e","cty","cntry","api","data","regenerator_default","wrap","_context","prev","next","preventDefault","console","log","target","elements","fetch","concat","sent","json","_this","setState","main","sys","humidity","description","alert","stop","components_Locate","this","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83c03f48.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nvar Weather = (p) =>{\r\n        return(\r\n            <div className=\"weather\">\r\n                {\r\n                    p.temp && <p className=\"infoLabel\">Temperature : <span className=\"infoValue\">{p.temp} Â°C</span></p>\r\n                }\r\n\r\n                {\r\n                    p.city && <p className=\"infoLabel\">City : <span className=\"infoValue\">{p.city}</span></p>\r\n                }\r\n\r\n                {\r\n                    p.country && <p className=\"infoLabel\">Country code : <span className=\"infoValue\">{p.country}</span></p>\r\n                }\r\n\r\n                {\r\n                    p.hum && <p className=\"infoLabel\">Humidity : <span className=\"infoValue\">{p.hum}%</span></p>\r\n                }\r\n\r\n                {\r\n                    p.desc && <p className=\"infoLabel\">Description : <span className=\"infoValue\">{p.desc}</span></p>\r\n                }\r\n                \r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\nexport default Weather","import React from 'react'\r\n\r\n\r\n\r\nvar Locate = (p) =>{\r\n        return(\r\n            <form onSubmit={p.weather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country\" />\r\n                <input type=\"submit\" value=\"Get weather\" />\r\n            </form>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\nexport default Locate","import React, { Component } from 'react'\nimport './App.css'\nimport Weather from './components/Weather'\nimport Locate from './components/Locate'\n\nvar apiKey = \"e0e628851654f684ace9162ac8ecc2aa\"\n\nclass App extends Component {\n\n  state={\n    temp: '',\n    city: '',\n    country: '',\n    hum: '',\n    desc: '',\n  }\n\n  getWeather = async (e) =>{\n    e.preventDefault()\n    console.log(\"weather\")\n    var cty = e.target.elements.city.value\n    var cntry = e.target.elements.country.value\n    if(cty && cntry){ \n    var api = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cty},${cntry}&appid=${apiKey}&units=metric`)\n    var data = await api.json()\n    try{\n    this.setState({\n      temp: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      hum: data.main.humidity,\n      desc: data.weather[0].description,\n    })}\n    catch(e){\n      alert(cty+\" is not valid\");\n    }\n    }\n    else{\n      alert(\"fill all fields\")\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"form\">\n        <Locate weather={this.getWeather}/>\n        <Weather\n              temp={this.state.temp}\n              city={this.state.city}\n              country={this.state.country}\n              hum={this.state.hum}\n              desc={this.state.desc}\n        />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}